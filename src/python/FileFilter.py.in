#!/usr/bin/env python 
# ############################################################################ #
#
#  Copyright (c) Los Alamos National Security, LLC.  This file is part of the
#  Truchas code (LA-CC-15-097) and is subject to the revised BSD license terms
#  in the LICENSE file found in the top-level directory of this distribution.
#
# ############################################################################ #

# Standard Python modules
import os
import sys

def IterFiles(directory, **extraWalkArgs):
    '''
    A simple wrapper around os.walk that returns file paths.
    **extraWalkArgs are passed to os.walk if you want to change the defaults 
    there.
    '''
    for root, dirs, files in os.walk(directory, **extraWalkArgs):
        for fileName in files:
            yield os.path.join(root, fileName)

def Filter(func):
    '''
    This is the filter creator function, you can also use it as a decorator.

    usage: Filter(function, *args **keywordArgs)
    args and keywordArgs are automatically passed to the function during 
    iteration.

    The function passed to it must take a valid file path as a first argument
    example:
        @Filter
        def MinSize(file, minsize):
            return os.path.getsize(file) >= minsize:
        # Now you have created a filter that can take a list of files and a
        # minsize argument and apply the minsize condition to the files list
        # Print files in '.' that are 1MB or larger
        for file in MinSize(os.listdir('.'), 1024*1024):
            print file
    '''
    def wrapper(files, *a, **kw):
        for file in files:
            if func(file, *a, **kw):
                yield file
    return wrapper

@Filter
def Whitelist(file, patterns):
    for pat in patterns:
        if fnmatch.fnmatch(file, pat):
            return True
    return False

@Filter
def Blacklist(file, patterns):
    for pat in patterns:
        if fnmatch.fnmatch(file, pat):
            return False
    return True

@Filter
def MinSize(file,minsize):
  return os.path.getsize(file) >= minsize

if __name__ == '__main__':

  # Print out all files larger than 1Gb
  ONE_GIG=1024*1024*1024
  for file in MinSize(IterFiles('/local/scratch/lpritch'),ONE_GIG):
    print file


