# ############################################################################ #
#
#  Copyright (c) Los Alamos National Security, LLC.  This file is part of the
#  Truchas code (LA-CC-15-097) and is subject to the revised BSD license terms
#  in the LICENSE file found in the top-level directory of this distribution.
#
# ############################################################################ #

import sys
import os

try:
  import subprocess as process
except ImportError:
  print 'Current Python version ' + str(sys.version) + 'does not have subprocess module'
  raise ImportError, 'Module requires subprocess found in Python 2.4 and higher'

from .mpi import MpiInterface
from .error import TruchasRuntimeError, TruchasInputError, TruchasError
from Truchas import _OS, _ARCH,_COMPILER,_TRUCHAS_INSTALL_PREFIX

# The truchas executable
def get_dflt_executable():
  return '@Truchas_EXECUTABLE@'

def get_dflt_restart_executable():
  dflt_bin=_TRUCHAS_INSTALL_PREFIX + \
           os.path.sep + 'bin'
  return dflt_bin + os.path.sep + 'write_restart'	   

# --- From stackoverflow.com to grab the last window length lines of a file
#     Used in the TruchasBinary class to determine the exit status of the 
#     truchas binary.
def tail( f, window=20 ):
    BUFSIZ = 1024
    f.seek(0, 2)
    bytes = f.tell()
    size = window
    block = -1
    data = []
    while size > 0 and bytes > 0:
        if (bytes - BUFSIZ > 0):
            # Seek back one whole BUFSIZ
	    f.seek(block*BUFSIZ, 2)
            # read BUFFER
            data.append(f.read(BUFSIZ))
        else:
            # file too small, start from begining
            f.seek(0,0)
            # only read what was not read
            data.append(f.read(bytes))
        linesFound = data[-1].count('\n')
        size -= linesFound
        bytes -= BUFSIZ
        block -= 1
    return '\n'.join(''.join(data).splitlines()[-window:])

# --- Truchas Write Restart Class
class TruchasWriteRestart:

  def __init__(self,filename=None):
    if filename is None:
      filename=get_dflt_restart_executable()
    self.executable=os.path.abspath(filename)
    self.cycle = None
    self.output = None
    self.h5file = None
  
  def _cycle_opt(self):
    if self.cycle != None:
      return '-n '+str(self.cycle)
    else:
      return ''

  def _output_opt(self):
    if self.output != None:
      return '-o '+str(self.output)
    else:
      return ''

  def dflt_output(self):
    file=None
    if self.h5file != None and self.cycle != None:
      newext='restart.%i'%self.cycle
      file=self.h5file.replace('.h5',newext)
    else:
      print 'W A R N I N G !!! Can not define a default output with an HDF5 file and cycle'
    return file  

  def executable_args(self):
    string_args=self._output_opt()+' '+self._cycle_opt()+' '+self.h5file
    return string_args
    
  def run(self):
    import shlex
    if self.h5file == None:
      raise TruchasError('Can not run write_restart with out an HDF5 file')
    if self.cycle == None:
      raise TruchasError('Can not run write_restart with out a cycle definition')
    str_args=self.executable+' '+self._cycle_opt()+' '+self._output_opt()+' '+self.h5file
    args=shlex.split(str_args)
    try:
      pipe=process.Popen(args,bufsize=-1,stdout=None,stderr=None)
    except ValueError:
      raise ValueError, 'Popen called with the wrong arguments'
    except OSError:
      raise TruchasError, 'write restart binary failed to run'
    except:
      raise
    else:
      try:
	pipe.wait()
      except KeyboardInterrupt:
        os.kill(pipe.pid,signal.SIGTERM)
        num_kills=1
        while pipe.poll() == None and num_kills < 100:
          os.kill(pipe.pid,signal.SIGKILL)
          time.sleep(5)
          num_kills=num_kills+1
        if pipe.poll() == None and num_kills >= 100:
          print 'W A R N I N G!!!!!! Could not kill PID ' + str(pipe.pid)
    return pipe.returncode	  


# --- Truchas Binary Classes
class TruchasBinary(object):
  
  def __init__(self,t_executable=None,restart_executable=None):
    if t_executable is None:
      t_executable=get_dflt_executable()
    if restart_executable is None:
      restart_executable = get_dflt_restart_executable()
    # Executables  
    self.executable=os.path.abspath(t_executable)
    self.restart_executable=os.path.abspath(restart_executable)
    # Command line options for the Truchas executable 
    self.input=None
    self.outdir=None
    self.restart=None
    # Number of processors, MPI ranks
    self.nprocs=None
    # Files or pipes for the STDOUT and STDERR streams 
    self.stdout=None
    self.stderr=None
    # HDF5 Object, only defined after run is called 
    self.output=None

  def _outdir_opt(self):
    if self.outdir != None:
      return '-o:'+self.outdir
    else:
      return ''

  def _restart_opt(self):
    if self.restart != None:
      return '-r:'+self.restart
    else:
      return ''

  def _input_arg(self):
    if self.input != None:
      return str(self.input)
    else:
      return ''

  def _define_stdout_pipe(self):
    pipe=self.stdout
    if self.stdout != None and isinstance(self.stdout,str):
      pipe=open(self.stdout,'w')
    return pipe
  
  def _define_stderr_pipe(self):
    pipe=self.stderr
    if self.stderr != None and isinstance(self.stderr,str):
      pipe=open(self.stderr,'w')
    return pipe

  def _exit_from_text(self):
    import re

    normal_exit=re.compile('truchas terminated normally')
    exit_code=0

    if self.stdout != None and isinstance(self.stdout,str):
      if os.path.exists(self.stdout):
	fh=open(self.stdout,'r')
	last_line=tail(fh,1)
	fh.close()
	if normal_exit.match(last_line):
	  exit_code=0
	else:
	  exit_code=1
    
    return exit_code

  def write_restart(self,cycle,restart_executable=None,output=None):
    if restart_executable is None:
      writer_executable=self.restart_executable
    else:
      writer_executable=restart_executable
    if output is None:
      output = 'restart.%i' % (cycle)
    writer = TruchasWriteRestart(writer_executable)
    writer.output=output
    writer.cycle=cycle
    writer.h5file=self.h5file
    try:
      writer.run()
    except:
      raise TruchasIOError('Failed to write a restart file')
    else:
      self.restart=output
    return self.restart

  def executable_args(self):
    string_args=self._outdir_opt()+' '+self._restart_opt()+' '+self._input_arg()
    return string_args.split()

  def run(self):
    print 'Can not call run from the base class'
    raise TruchasRuntimeError('Invalid method called')
    

class TruchasMpiBinary(TruchasBinary):

  def run(self):
    try:
      np=int(self.nprocs)
    except TypeError:
      raise TruchasInputError('Invalid data type (int) for MPI ranks')
    if np < 0:
      raise TruchasInputError('Invalid number of MPI ranks')
    mpi=MpiInterface()
    mpi.nprocs=np
    mpi.stdout=self._define_stdout_pipe()
    mpi.stderr=self._define_stderr_pipe()
    try:
      mpi.run(self.executable,self.executable_args())
    except:
      raise
    else:
      status = mpi.exit_code or self._exit_from_text()
      if status != 0:
        errmess='Non-zero exit code returned ' + str(status)
        raise TruchasRuntimeError(errmess)
	
    return status

class TruchasSerialBinary(TruchasBinary):

  def run(self):
    import signal
    args=[]
    args.append(self.executable)
    args=args+self.executable_args()
    exit_code=-1
    stdout_pipe=self._define_stdout_pipe()
    stderr_pipe=self._define_stderr_pipe()
    try:
      pipe=process.Popen(args,bufsize=-1,stdout=stdout_pipe,stderr=stderr_pipe)
    except ValueError:
      raise ValueError, 'Popen called with incorect arguments'
    except OSError:
      raise OSError, 'Failed to run ' + self.executable
    except:
      raise
    else:
      try:
        pipe.wait()
      except KeyboardInterrupt:
        os.kill(pipe.pid,signal.SIGTERM)
        num_kills=1
        while pipe.poll() == None and num_kills < 100:
          os.kill(pipe.pid,signal.SIGKILL)
          time.sleep(5)
          num_kills=num_kills+1
        if pipe.poll() == None and num_kills >= 100:
          print 'W A R N I N G!!!!!! Could not kill PID ' + str(pipe.pid)
    exit_code=pipe.returncode or self._exit_from_text()
    if exit_code != 0:
      msg='Truchas returned non-zero exit status %i'%exit_code
      raise TruchasRuntimeError(msg)
    return exit_code 

def SelectTruchasBinary(parallel=False,filename=None):
  if parallel:
    return TruchasMpiBinary(filename)
  else:
    return TruchasSerialBinary(filename)

'''
def SelectTruchasBinary(parallel=False,debug=False,os_type=_OS,arch=_ARCH,compiler=_COMPILER):
  if parallel:
    build_type='parallel'
  else:
    build_type='serial'
  if debug:
    opt_type='dbg'
  else:
    opt_type='opt'
  basename='t-'+os_type+'.'+arch+'.'+compiler+'.'+build_type+'.'+opt_type+'-'+'2.8.dev'
  binary=_TRUCHAS_INSTALL_PREFIX+os.path.sep+'bin'+os.path.sep+basename
  if parallel:
    return TruchasMpiBinary(binary)
  else:
    return TruchasSerialBinary(binary)
'''

def check_truchas_exit(outfile):

  import re

  normal_exit=re.compile('truchas terminated normally')
  exit_code=0

  try:
    fh=open(outfile)
  except Exception,e:
    raise TruchasIOError('Failed to open STDOUT truchas file')
  else:
    last_line=tail(fh,1)
    fh.close()
    if normal_exit.match(last_line):
      exit_code=0
    else:
      exit_code=1

  return exit_code     
