# ############################################################################ #
#
#  Copyright (c) Los Alamos National Security, LLC.  This file is part of the
#  Truchas code (LA-CC-15-097) and is subject to the revised BSD license terms
#  in the LICENSE file found in the top-level directory of this distribution.
#
# ############################################################################ #

# - Sta
import sys
import os

import numpy
import logging

import Danu

from  .error import TruchasError, TruchasOutputError, TruchasIOError

# --- Order data by global id
def remap_data(data,map):
  if data.ndim > 1:
    (n,dim)=data.shape
  else:
    dim=1
    (n,)=data.shape
  ordered=numpy.empty(data.shape,data.dtype)  
  if data.ndim > 1:
    for i in range(n):
      gid=map[i]-1
      ordered[gid,:]=data[i,:]
  else:
    for i in range(n):
      gid=map[i]-1
      ordered[gid]=data[i]
  return ordered    

# --- Eliminate masked data
def mask_data(data,mask):
  if data.ndim > 1:
    (n,dim)=data.shape
    # Numpy 1.6 is required to use the count_nonzero function.
    #n = mask.size - numpy.count_nonzero(mask)
    # This version works with numpy 1.4
    n = mask.size - (mask != 0).sum()
    mdata=numpy.empty((n,dim),data.dtype)
    j = 0
    for i in range(n):
      if mask[i] == 0:
        mdata[j,:] = data[i,:]
        j += 1
    return mdata
  else:
    return numpy.ma.masked_array(data,mask=mask).compressed()


# --- Truchas Output classes

class TruchasRegion(object):

  def __init__(self,simulation,matids):

    '''Use the NumPy masked array capability'''
    from numpy import ma as ma

    # Input matids can be either a single int or an array of ints
    self.matids=[]
    if isinstance(matids,int):
      self.matids.append(matids)
    elif isinstance(matids,list) or isinstance(matids,numpy.ndarray):
      self.matids=matids
    else:
      raise TruchasError('Invalid material id choice')

    # Cellmask array
    blockids=simulation.blockid()
    ncell = simulation.mesh_ncells()
    self.cellmask=numpy.ones(ncell)
    for n in range(ncell):
      if blockids[n] in self.matids:
	self.cellmask[n]=0

    # Nodemask array
    nnode=simulation.mesh_nnodes()
    self.nodemask=numpy.ones(nnode)
    connect = simulation.get_mesh_connectivity()
    for i in range(ncell):
      if self.cellmask[i] == 0:
        for j in connect[i,:]:  # N.B. connect values (node indices) are 1-based
          self.nodemask[j-1] = 0
      
    # These will be computed on the fly
    self.cellmask_serial = None
    self.nodemask_serial = None



class TruchasProbe:

  # Probe dataset name regular  expression
  DATASET_REGEX_PATTERN = '^P\d+:(?P<field>\w+)'

  # Array nc x M where  3<=M<=5, and nc number of cycles
  CYCLE_INDEX      = 0
  TIME_INDEX       = 1
  DATA_START_INDEX = 2

  # Probe name
  NAME_ATTR_NAME = 'NAME'

  # Probe location
  X_ATTR_NAME    = 'X'
  Y_ATTR_NAME    = 'Y'
  Z_ATTR_NAME    = 'Z'
 
  # Probe cell location
  CELL_INDEX_ATTR_NAME = 'CELL_INDEX'
  CELL_X_ATTR_NAME     = 'CELL_X'
  CELL_Y_ATTR_NAME     = 'CELL_Y'
  CELL_Z_ATTR_NAME     = 'CELL_Z'
  
  # Probe node location
  NODE_INDEX_ATTR_NAME = 'NODE_INDEX'
  NODE_X_ATTR_NAME     = 'NODE_X'
  NODE_Y_ATTR_NAME     = 'NODE_Y'
  NODE_Z_ATTR_NAME     = 'NODE_Z'

  def __init__(self,sim,name):

    # Probe name - dataset name NOT the Truchas name
    self.pname = name

    # Danu probe instance
    try:  
      self.danu_probe=sim.danu_sim.probe_open(name)
    except Exception,e:
      raise TruchasOutputError(str(e))

    # Danu attributes
    try:
      self.danu_attr=self.danu_probe.attributes()
    except Exception,e:
      msg='Probe dataset is required to have attributes: '+str(e)
      raise TruchasOutputError(msg)

    try:
      # Truchas probe name 
      self.name=self.danu_attr[TruchasProbe.NAME_ATTR_NAME]

      # Probe location coordinates
      self.x=self.danu_attr[TruchasProbe.X_ATTR_NAME]
      self.y=self.danu_attr[TruchasProbe.Y_ATTR_NAME]
      self.z=self.danu_attr[TruchasProbe.Z_ATTR_NAME]
     
      # Probe cell index and location
      self.cell_index=self.danu_attr[TruchasProbe.CELL_INDEX_ATTR_NAME]
      self.cell_x=self.danu_attr[TruchasProbe.CELL_X_ATTR_NAME]
      self.cell_y=self.danu_attr[TruchasProbe.CELL_Y_ATTR_NAME]
      self.cell_z=self.danu_attr[TruchasProbe.CELL_Z_ATTR_NAME]
     
      # Probe node index and location
      self.node_index=self.danu_attr[TruchasProbe.NODE_INDEX_ATTR_NAME]
      self.node_x=self.danu_attr[TruchasProbe.NODE_X_ATTR_NAME]
      self.node_y=self.danu_attr[TruchasProbe.NODE_Y_ATTR_NAME]
      self.node_z=self.danu_attr[TruchasProbe.NODE_Z_ATTR_NAME]

    except AttributeError,e:
      mess='Undefined attribute for probe %s:'%name
      mess+=str(e)
      raise TruchasOutputError(mess)

    # Define the field member data from the name
    import re
    probe_name=re.compile(TruchasProbe.DATASET_REGEX_PATTERN)
    self.field=probe_name.match(self.pname).group('field')

  def get_data(self):
    return self.danu_probe.read()

  def get_cycle_data(self):
    return self.danu_probe.read()[:,TruchasProbe.CYCLE_INDEX]

  def get_time_data(self):
    return self.danu_probe.read()[:,TruchasProbe.TIME_INDEX]

  def find_cycle_data(self,cycle):
    ret_data=[]
    data=self.get_data()
    (nc,d)=data.shape
    idx=0
    for nc in data[:,TruchasProbe.CYCLE_INDEX]:
      if nc == cycle:
	ret_data=data[idx,TruchasProbe.DATA_START_INDEX:]
	break
      idx+=1
    return ret_data

  def find_time_data(self,time,tol=1.0e-9):
    ret_data=[]
    data=self.get_data()
    (nc,d)=data.shape
    for c in range(nc+1):
      t=data[c,TruchasProbe.TIME_INDEX]
      if abs(time-t) <= tol:
	ret_data=data[c,TruchasProbe.DATA_START_INDEX:]
	break
    return ret_data


class TruchasSeries(object):
  
  FIELDTYPE_ATTR_NAME = 'FIELDTYPE'
  CELLTYPE_NAME       = 'CELL'
  NODETYPE_NAME       = 'NODE'

  def __init__(self,simulation,name=None,id=None):

    # Save a copy of the simulation instance
    self.simulation=simulation
    
    # Can create a TruchasSeries instance from the name or id number
    # Define the name if id is used.
    if name == None and id == None:
      raise TruchasOutputError('Must specify name or id number when creating a series object')
    elif name == None:
      name=simulation.danu_sim.get_sequence_name(id)
    self.name=name

    # Danu series instance
    try:  
      self.danu_seq=simulation.danu_sim.get_sequence(name)
    except Exception, e:
      msg='Failed to open series group %s in simulation %s: %s' % (name,simulation.name,str(e))
      raise TruchasOutputError(msg)

    # Danu attributes
    self.danu_attr={}
    try:
      self.danu_attr=self.danu_seq.attributes()
    except:
      pass

    # Copy useful member data to this level to improve code readability
    self.time=self.danu_seq.time
    self.cycle=self.danu_seq.cycle

    # List of all dataset names under this group
    self.datasets=self.danu_seq.data_list()

    # Separate the datasets into node or cell based datasets
    self.cell_field_names=[]
    self.node_field_names=[]
    for d in self.datasets:
      if self.danu_seq.data_attribute_exists(d,TruchasSeries.FIELDTYPE_ATTR_NAME):
	type=self.danu_seq.get_data_attribute(d,TruchasSeries.FIELDTYPE_ATTR_NAME)
	if type == TruchasSeries.CELLTYPE_NAME:
	  self.cell_field_names.append(d)
	elif type == TruchasSeries.NODETYPE_NAME:
	  self.node_field_names.append(d)
	else:
	  print 'W A R N I N G!!! Dataset %d is not a %s or %s type' % (d,TruchasSeries.CELLTYPE_NAME,TruchasSeries.NODETYPE_NAME)
  
  def get_data(self,dataname,serialize=True,region=None):
    data=self.danu_seq.data_read(dataname)
    # We may need to return the data in the serial order (map)
    # and/or mask out certain data elements (mask) 
    map=None
    mask=None
    if dataname in self.cell_field_names:
      if serialize is True:
        map=self.simulation.cellmap()
        if region is not None:
          if region.cellmask_serial is None:
            region.cellmask_serial=remap_data(region.cellmask,map)
          mask=region.cellmask_serial
      else:
        if region is not None:
          mask=region.cellmask
    elif dataname in self.node_field_names:
      if serialize is True:
        map=self.simulation.nodemap()
        if region is not None:
          if region.nodemask_serial is None:
            region.nodemask_serial=remap_data(region.nodemask,map)
          mask=region.nodemask_serial
      else:
        if region is not None:
          mask=region.nodemask
    if map is not None:
      data=remap_data(data,map)
    if mask is not None:
      data=mask_data(data,mask)
    return data



class TruchasBaseSimulation(object):
  '''Base class that for both MAIN and EM simulation groups'''

  def __init__(self,file,name):

    # Simulation name
    self.name=name

    # Danu simulation instance
    try:
      self.danu_sim=file.danu_file.get_simulation(name)
    except:
      msg='Failed to open simulation %s in file %s' % (name,file.name)
      raise TruchasOutputError(msg)

    # Danu attributes
    self.danu_attr={}
    try:
      self.danu_attr=self.danu_sim.attributes()
    except:
      pass

    # Non-series dataset names
    try:
      self.dataset_names=self.danu_sim.data_list()
    except Exception, e:
      msg='Failed to read the non-series dataset names in %s: %s' % (name,str(e))
      raise TruchasOutputError(msg)

    # Probe dataset names
    try:
      self.probe_names=self.danu_sim.probe_list()
    except Exception,e:
      msg='Failed to read the probe name list in %s: %s' % (name,str(e))
      raise TruchasOutputError(msg)

    # Series group names
    try:
      self.series_names=self.danu_sim.sequence_list()
    except Exception, e:
      msg='Failed to read the sequence group name list in %s' % name
      raise TruchasOutputError(msg)

  # Return TruchasSeries instance by id
  def get_series(self,id):
    series_name=self.danu_sim.get_sequence_name(id)
    if series_name not in self.series_names:
      msg='Series %s is not found in %s' % (series_name,self.name)
      raise TruchasOutputError(msg)
    #return TruchasSeries(self.sim,series_name)
    return TruchasSeries(self,series_name)

  # Return the final TruchasSeries instance
  def get_last_series(self):
    last_id=len(self.series_names)
    if last_id > 0:
      return self.get_series(last_id)
    else:
      return None

  # Return a NumPy array of data stored under a series group
  # Series group is selected by id or cycle or time. The tolerance parameter
  # controls the time search. 
  def get_series_data(self,dataname,id=None,cycle=None,time=None,tol=1.0e-9):
    data=[]
    series=self.find_series(id,cycle,time,tol)
    try:
      data=series.get_data(dataname)
    except:
      pass
    return data

  # Return a TruchasSeries instance that satifies the search criteria
  # of id or cycle or time. Tolerance parameter controls the time
  # search. 
  def find_series(self,id=None,cycle=None,time=None,tol=1.0e-9):
    series=None
    if id == None and cycle == None and time == None:
      raise TruchasError('Must specify id or cycle or time to search series')
    elif id != None:
      series_name=self.danu_sim.get_sequence_name(int(id))
      if series_name in self.series_names:
	series=TruchasSeries(self,series_name)
    elif cycle != None:
      for s in self.series_names:
	so=TruchasSeries(self,name=s)
	if so.cycle == cycle:
	  series=so
	  break
    else:
      for s in self.series_names:
	so=TruchasSeries(self,name=s)
	if abs(so.time-time) <= tol:
	  series=so
	  break
    return series	

  # Return a TruchasProbe instance that matches the 
  # name attribute and field.
  def get_probe(self,name,field):
    import re
    p_ret=None
    # Build the regular expression matching object
    # and create a list of field probes
    str_regex='P\d+:'+field
    field_pattern=re.compile(str_regex)
    field_probes=[p for p in self.probe_names if field_pattern.match(p)]
    for p in field_probes:
      po=TruchasProbe(self,p)
      if po.name == name:
	p_ret=po
	break
    return p_ret  

  # Return a NumPy array of Non-series data by name
  def get_data(self,name):
    return self.danu_sim.data_read(name)

  # Last cycle number in the simulation
  def get_last_cycle(self):
    return self.get_last_series().cycle

  # Last simulation time in the simulation 
  def get_last_time(self):
    return self.get_last_series().time

  

class TruchasEMSimulation(TruchasBaseSimulation):

  TIME_ATTR_NAME = 'TIME' 

  def __init__(self,file,name):
    TruchasBaseSimulation.__init__(self,file,name)
    try:
      self.time=float(self.danu_attr[TruchasEMSimulation.TIME_ATTR_NAME])
    except Exception, e:
      raise TruchasOutputError(str(e))

	  
class TruchasSimulation(TruchasBaseSimulation):

  BLOCKID_DATA_NAME  = 'BLOCKID'
  CELLMAP_DATA_NAME  = 'CELLMAP'
  NODEMAP_DATA_NAME  = 'NODEMAP'
  NPROC_DATA_NAME    = 'NUMPROCS'
  CELLPART_DATA_NAME = 'CELLPART'
  
  def __init__(self,file,name):

    # Init with the base class constructor
    TruchasBaseSimulation.__init__(self,file,name)

    # Define the number of processors
    try:
      np=self.danu_sim.data_read(TruchasSimulation.NPROC_DATA_NAME)
    except:
      msg='Failed to determine the number of processors in %s' % name
      raise TruchasOutputError(msg)
    self.numprocs=int(np[0]) # NumPy returns an ndarray array, just want an int type

    # Define the mesh link if it exists
    self.mesh_link_exists=self.danu_sim.mesh_link_exists()
    if self.mesh_link_exists:
      self.danu_mesh=self.danu_sim.open_mesh_link()
    else:
      self.danu_mesh=None
    
 
  def blockid(self):
    blockid=[]
    try:
      blockid=self.danu_sim.data_read(TruchasSimulation.BLOCKID_DATA_NAME)
    except RuntimeError:
      msg='Failed to read the block id (%s) dataset from %s' % (TruchasSimulation.BLOCKID_DATA_NAME,self.name)
      raise TruchasOutputError(msg)
    except:
      raise
    return blockid

  def cellmap(self):
    cellmap=[]
    try:
      cellmap=self.danu_sim.data_read(TruchasSimulation.CELLMAP_DATA_NAME)
    except RuntimeError:
      msg='Failed to read the cell map (%s) dataset from %s' % (TruchasSimulation.CELLMAP_DATA_NAME,self.name)
      raise TruchasOutputError(msg)
    except:
      raise
    return cellmap

  def cellpart(self):
    cellpart=[]
    if self.numprocs > 1:
      try:
        cellpart=self.danu_sim.data_read(TruchasSimulaton.CELLPART_DATA_NAME)
      except RuntimeError:
        msg='Failed to read the cell partition (%s) dataset from %s' % (TruchasSimulation.CELLPART_DATA_NAME,self.name)
        raise TruchasOutputError(msg)
      except:
        raise
    return cellpart

  def nodemap(self):
    nodemap=[]
    try:
      nodemap=self.danu_sim.data_read(TruchasSimulation.NODEMAP_DATA_NAME)
    except RuntimeError:
      msg='Failed to read the node map (%s) dataset from %s' % (TruchasSimulation.NODEMAP_DATA_NAME,self.name)
      raise TruchasOutputError(msg)
    except:
      raise
    return nodemap

  def mesh_nnodes(self):
    if self.mesh_link_exists:
      return self.danu_mesh.nnodes()
    else:
      return self.nodemap().size[0]

  def mesh_ncells(self):
    if self.mesh_link_exists:
      return self.danu_mesh.nelem()
    else:
      return self.cellmap().size[0]
  
  def get_mesh_connectivity(self):
    try:
      connect=self.danu_mesh.read_connectivity()
    except:
      raise TruchasError('No mesh link')
    return connect

  def get_mesh_coordinates(self):
    coordinates=None
    if self.danu_mesh is not None:
      coordinates=self.danu_mesh.coordinates()


class TruchasMesh(object):

 
  def __init__(self,file,name):

    # Mesh name
    self.name=name
   
    # Danu Mesh Instance
    try:
      self.danu_mesh=file.danu_file.get_mesh(name)
    except Exception, e:
      raise TruchasOutputError(str(e))
 
    # Danu attributes
    self.danu_attr=self.danu_mesh.attributes()

    # Number of nodes
    try:
      self.nnodes=self.danu_mesh.nnodes()
    except Exception,e:
      raise TruchasOutputError(str(e))
    
    # Number of cells (elements)
    try:
      self.ncells=self.danu_mesh.nelem()
    except Exception,e:
      raise TruchasOutputError(str(e))

    # Dimension 
    self.dim=self.danu_mesh.dim

    # Mesh type (UNSTRUCTURED or STRUCUTURED) 
    self.mesh_type=self.danu_mesh.mesh_type

    # Element type (HEX, TET, QUAD, TRI or LINE
    self.elem_type=self.danu_mesh.elem_type

    # Element order
    self.elem_order = self.danu_mesh.get_attribute('Element Order')


#  def coordinates(self):
#    shape=(self.nnodes,self.dim)
#   coordinates=numpy.empty(shape)
#   d=0
#   while d < self.dim:
#     coordinates[:,d]=self.danu_mesh.read_coordinates(d,self.nnodes)
#     d=d+1
#   return coordinates  

  def coordinates(self):
    return self.danu_mesh.coordinates()

  def connectivity(self):
    return self.danu_mesh.read_connectivity()

  def centroids(self):
    # Want a NumPy 2D array not a list
    coordinates=numpy.empty((self.nnodes,self.dim))
    d=0
    while d < self.dim:
      coordinates[:,d]=self.danu_mesh.read_coordinates(d,self.nnodes)
      d=d+1
    connect=self.connectivity()  
    buff=numpy.empty((self.elem_order,self.dim))
    center=numpy.empty((self.ncells,self.dim))
    nc=0
    while nc < self.ncells:
      if connect[nc,0] == connect[nc,1]:   # TET
        list = connect[nc,1:5]
      elif connect[nc,4] == connect[nc,5]: # PYRAMID
        list = connect[nc,:5]
      elif connect[nc,4] == connect[nc,7]: # WEDGE
        list = connect[nc,:6]
      else: # HEX
        list = connect[nc,:]
      xc = numpy.zeros(self.dim)
      for i in list:
        xc = xc + coordinates[i-1,:]
      center[nc,:] = xc / list.size
      nc=nc+1	
    return center

class TruchasOutput(object):

  def __init__(self,name):

    # File name
    self.name=name

    # Danu output object (READ_ONLY)
    try:
      self.danu_file=Danu.Output(name,'r')
    except Exception,e:
      msg='Failed to open %s: %s' % (name,str(e))
      raise TruchasIOError(msg)

    # Danu attributes
    self.danu_attr={}
    try:
      self.danu_attr=self.danu_file.attributes()
    except:
      pass

    # List of mesh names  
    self.mesh_names=[]
    try:
      self.mesh_names=self.danu_file.mesh_list()
    except:
      pass

    # List of simulation names
    self.simulation_names=[]
    try:
      self.simulation_names=self.danu_file.simulation_list()
    except:
      pass

  def get_simulation(self,name='MAIN'):
    return TruchasSimulation(self,name)

  def get_em_simulation(self,name):
    return TruchasEMSimulation(self,name)

  def get_mesh(self,name='DEFAULT'):
    return TruchasMesh(self,name)






