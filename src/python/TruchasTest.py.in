#!/usr/bin/env python
# ############################################################################ #
#
#  Copyright (c) Los Alamos National Security, LLC.  This file is part of the
#  Truchas code (LA-CC-15-097) and is subject to the revised BSD license terms
#  in the LICENSE file found in the top-level directory of this distribution.
#
# ############################################################################ #

import os
import sys

import logging
import unittest

import Truchas

'''
Simple functions to query the 
executable, build and source directories.
'''
def get_executable_directory():
  return '@TruchasExe_BINARY_DIR@'

def get_executable():
  dir=get_executable_directory()
  return dir + os.path.sep + '@Truchas_EXECUTABLE@' 

def get_restart_executable():
  dir='@TruchasToolsPP_BINARY_DIR@' 
  return dir + os.path.sep + 'write_restart' 

def get_source_rootdir():
  return '@Truchas_SOURCE_DIR@'

def get_build_rootdir():
  return '@Truchas_BINARY_DIR@'

def get_test_source_rootdir():
  return '@TruchasTest_SOURCE_DIR@'

def get_test_build_rootdir():
  return '@TruchasTest_BINARY_DIR@'

def verify_directory(dir):
  try:
    os.stat(dir)
  except:
    try:
      os.makedirs(dir)
    except:
      raise TruchasIOError("Failed to create " + dir)

def verify_file(f):
  try:
    os.stat(f)
  except:
    raise TruchasIOError("Failed state the file " + f)

'''
Base Test Case Class
'''
class BaseTestCase(unittest.TestCase):

  '''Flag that the class has been initialized'''
  _is_initialized = False

  '''Truchas object'''
  truchas=None

  '''Flag for parallel builds'''
  truchas_is_parallel=None

  @classmethod
  def setUpClass(cls):
    cls.truchas_is_parallel=@ENABLE_MPI_FLAG@
    executable=get_executable() 
    cls.truchas=Truchas.SelectTruchasBinary(parallel=@ENABLE_MPI_FLAG@,filename=executable)
    cls.truchas.restart_executable=get_restart_executable()
    cls._is_initialized = True

  @classmethod
  def tearDownClass(cls):
    pass

  def setUp(self):
    if self._is_initialized is False:
      self.setUpClass()

  def tearDown(self):
    pass

  '''
  unittest ignores any method that does not begin with
  'test_' or 'runTest'
  '''
  def get_input_rootdir(self,test_name):
    return os.path.join(get_test_source_rootdir(),test_name)

  def get_output_rootdir(self,test_name):
    return os.path.join(get_test_build_rootdir(), test_name)

  def clean_output_directory(self,test_name,outdir):
    path=os.path.join(self.get_output_rootdir(test_name),outdir)
    for f in os.listdir(path):
      f_path=os.path.join(path,f)
      if os.path.isfile(f_path):
        os.unlink(f_path)

  def build_output_directory(self,test_name,outdir):
    path=os.path.join(self.get_output_rootdir(test_name),outdir)
    verify_directory(path)
    return path

  def build_output_filename(self,test_name,outdir,file):
    return self.get_output_rootdir(test_name) + \
	   os.path.sep + outdir + \
	   os.path.sep + file

class GoldenTestCase(BaseTestCase):

  '''Need the test name to find the baseline output'''
  test_name=None

  '''Number of processors for parallel tests'''
  num_procs=None
  
  '''Name of the restart file (optional)'''
  restart_file=None

  '''Danu object of the test output file'''
  test_output=None

  '''Danu object of golden (baseline) output file'''
  gold_output=None

  @classmethod
  def setUpClass(cls):
    # Define the truchas binary 
    cls.truchas_is_parallel=@ENABLE_MPI_FLAG@
    executable=get_executable()
    cls.truchas=Truchas.SelectTruchasBinary(parallel=@ENABLE_MPI_FLAG@,filename=executable)
    cls.truchas.restart_executable=get_restart_executable()
    # Define the input file
    cls.truchas.input=os.path.join(get_test_source_rootdir(),cls.test_name,cls.test_name+'.inp')
    # Define the restart file if specified
    if cls.restart_file:
      cls.truchas.restart=os.path.join(get_test_source_rootdir(),cls.test_name,cls.restart_file)
    # Define the output directory, verify and clean
    outroot=os.path.join(get_test_build_rootdir(),cls.test_name)
    if cls.truchas_is_parallel and cls.num_procs > 1:
      cls.truchas.outdir=os.path.join(outroot,cls.test_name+'_poutput')
    else:
      cls.truchas.outdir=os.path.join(outroot,cls.test_name+'_output')
    verify_directory(cls.truchas.outdir)  
    # Define the number processors
    cls.truchas.nprocs=cls.num_procs
    # Define the stdout pipe
    stdout_file=cls.truchas.stdout=os.path.join(cls.truchas.outdir,cls.test_name+'.tty')
    stderr_file=cls.truchas.stderr=os.path.join(cls.truchas.outdir,cls.test_name+'.err')
    # Run
    cls.truchas.run()
    cls._is_initialized = True

  def setUp(self):
    if self._is_initialized is False:
      self.setUpClass()
    # Open the output file
    self.test_output=Truchas.TruchasOutput(self.get_output_file())
    # Open the gold output file
    self.gold_output=Truchas.TruchasOutput(self.get_golden_output_file())

  def get_output_file(self):
    file=self.test_name+'.h5'
    path=self.truchas.outdir
    return os.path.join(path,file)

  def get_golden_output_dir(self):
    if self.truchas_is_parallel and self.num_procs > 1:
      baseline=self.test_name+'_pgolden'
    else:
      baseline=self.test_name+'_golden'
    return os.path.join(get_test_source_rootdir(),self.test_name,baseline)
    #return os.path.join(get_source_rootdir(),'regressiontests',self.test_name,baseline)

  def get_golden_output_file(self): 
    golden_path=self.get_golden_output_dir()
    file=self.test_name+'.h5'
    return os.path.join(golden_path,file)

    

