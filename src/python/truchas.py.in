#!/usr/bin/env python
# ############################################################################ #
#
#  Python script to run truchas
#
# ############################################################################ #
#
#  Copyright (c) Los Alamos National Security, LLC.  This file is part of the
#  Truchas code (LA-CC-15-097) and is subject to the revised BSD license terms
#  in the LICENSE file found in the top-level directory of this distribution.
#
# ############################################################################ #

# Standard Python modules
import os
import sys

# Need Numerical Python
import numpy

# Need Element Tree
from xml.etree.ElementTree import ElementTree
from xml.etree.ElementTree import Element
from xml.etree.ElementTree import SubElement

# Either add the Truchas Python install location to the environment variable
# PYTHONPATH, or use the hard coded path here
try:
  from Truchas import SelectTruchasBinary
except ImportError:
  sys.path.append('@Python_INSTALL_PREFIX@')
  from Truchas import SelectTruchasBinary
except ImportError:
  print 'Attempted to import Truchas from @Python_INSTALL_PREFIX@ failed'
  raise


def get_executable_directory():
  return '@TruchasExe_BINARY_DIR@'

def get_executable():
  dir=get_executable_directory()
  return dir + os.path.sep + '@Truchas_EXECUTABLE@' 

def get_restart_executable():
  dir='@TruchasToolsPP_BINARY_DIR@' 
  return dir + os.path.sep + 'write_restart' 

class CLOptions:

  def __init__(self):
    from optparse import OptionParser
    usage='Usage: %prog [options] [--input|-i] INPUT'
    self.parser=OptionParser(usage)

    self.parser.add_option("--nprocs","-n",dest="nprocs", type='int',
                           default=1,help="Number of processors")
    self.parser.add_option("--input","-i",dest="input",
                           help="Truchas input file. (required)")
    self.parser.add_option("--output_dir", dest="outdir",
                           help="Truchas output dir name")
    self.parser.add_option("--restart","-r",dest='restart',
	                   help='Restart file name')

    (options,args) = self.parser.parse_args()

    self.input=options.input 
    self.outdir=options.outdir
    self.restart=options.restart
    self.nprocs=options.nprocs

  def check_options(self):

    # Check input
    if self.input is None:
      msg='Required input file is missing'
      self.parser.print_help()
      self.parser.error(msg)

    # Output directory
    if self.outdir is None:
      (root,ext)=os.path.splitext(self.input)
      self.outdir=os.path.basename(root)

    # Check restart file
    if self.restart is not None:
      try:
	os.path.isfile(self.restart)
      except:
	msg='%s restart file does not exist'%(self.restart)
	self.parser.error(msg)

    # Check the nprocs
    if self.nprocs <= 0:
      msg='Invalid number of processors %d'%(self.nprocs)
      self.parser.error(msg)

    flag='@ENABLE_MPI_FLAG@'
    if not flag and self.nprocs > 1:
      msg='%s is s serial binary will ignore nprocs > 0'%(get_executable())
      self.parser.error(msg)


def main():

  # Change the LD_LIBRARY_PATH to pick up the correct paths 
  truchas_install_library_dirs='@Truchas_LIBRARY_INSTALL_DIRS@'.split(';')
  ld_path=':'.join(str(p) for p in truchas_install_library_dirs)
  try:
    usr_ld_path=os.environ.get('LD_LIBRARY_PATH')
  except:
    os.environ['LD_LIBRARY_PATH']=ld_path
  else:
    os.environ['LD_LIBRARY_PATH']=ld_path
    os.environ['LD_LIBRARY_PATH']+=':'
    os.environ['LD_LIBRARY_PATH']+=usr_ld_path

  # Command line arguments
  cl_opts=CLOptions()
  cl_opts.check_options()

  # Grab a Truchas Python instance
  executable=get_executable()
  parallel_flag='@ENABLE_MPI_FLAG@'
  truchas=SelectTruchasBinary(parallel=parallel_flag,filename=executable)

  # Set the Truchas options
  truchas.input=cl_opts.input
  truchas.outdir=cl_opts.outdir
  truchas.nprocs=cl_opts.nprocs
  truchas.restart=cl_opts.restart


  # Run
  return truchas.run()

if __name__ == '__main__':

  sys.exit(main())
