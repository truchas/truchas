#!/usr/bin/env python
# ############################################################################ #
#
#  A sample Python script to run truchas
#
# ############################################################################ #
#
#  Copyright (c) Los Alamos National Security, LLC.  This file is part of the
#  Truchas code (LA-CC-15-097) and is subject to the revised BSD license terms
#  in the LICENSE file found in the top-level directory of this distribution.
#
# ############################################################################ #

# Standard Python modules
import os
import sys

# Need Numerical Python
import numpy

# Need Element Tree
from xml.etree.ElementTree import ElementTree
from xml.etree.ElementTree import Element
from xml.etree.ElementTree import SubElement

# Either add the Truchas Python install location to the environment variable
# PYTHONPATH, or use the hard coded path here
try:
  from Truchas import *
except ImportError:
  sys.path.append('@TruchasPython_INSTALL_PREFIX@')
  from Truchas import *
except ImportError:
  print 'Attempted to import Truchas from @TruchasPython_INSTALL_PREFIX@ failed'
  raise

# Either add the Danu Python install location to the environment variable
# PYTHONPATH, or use the hard coded path here
try:
  import Danu
except ImportError:
  danu_install_prefix='@Danu_PYTHON_INSTALL_PREFIX@'
  sys.path.append(danu_install_prefix)
  try:
    import Danu
  except:
    danu_build_prefix='@PyDanu_BINARY_DIR@'
    sys.path.append(danu_build_prefix)
    try:
      import Danu
    except ImportError:
      print 'Attempted to import Danu from %s and %s'%(danu_install_prefix,danu_build_prefix)
      raise

# Provide reaasonable indenting in the XML output, impossible to read without this
def indent(elem, level=0):
    i = "\n" + level*"  "
    if len(elem):
        if not elem.text or not elem.text.strip():
            elem.text = i + "  "
        if not elem.tail or not elem.tail.strip():
            elem.tail = i
        for elem in elem:
            indent(elem, level+1)
        if not elem.tail or not elem.tail.strip():
            elem.tail = i
    else:
        if level and (not elem.tail or not elem.tail.strip()):
            elem.tail = i

def prettyprint(tree,file=sys.stdout,encoding='utf-8',sortflag='default',sortcmp=None):
    root = tree.getroot()
    indent(root)
    try:
      tree.write(file,encoding,sortflag=sortflag,sortcmp=sortcmp)
    except TypeError:
      tree.write(file,encoding)

# ##### XDMF --- See http://www.xdmf.org/index.php/XDMF_Model_and_Format

# NumPy Data Type map to XDMF type
NumPyTypes={}
NumPyTypes['int32'] = 'Int'
NumPyTypes['int64'] = 'Int'
NumPyTypes['float32'] = 'Float'
NumPyTypes['float64'] = 'Float'

# Danu Element Type map to XDMF
DanuElem={}
DanuElem['TRI'] = 'Triangle'
DanuElem['QUAD'] = 'Quadrilateral'
DanuElem['TET'] = 'Tetrahedron'
DanuElem['HEX'] = 'Hexahedron'



class XDMFAttribute(object):

  def __init__(file,loc,name,dimensions,type,cell_field=True):
    self.node = Element(tag='Attribute')
    # Field name
    self.node.set('Name',name)
    # Field Type
    if cell_field:
      self.node.set('Center','Cell')
    else:
      self.node.set('Center','Node')
    # Subelement containing the data information  
    self.data_item=SubElement(parent=self.node,tag='DataItem')
    # Always! HDF5 
    self.data_item.set('Format', 'HDF5')
    # Dimensions as a whitespaced string
    dim_str='%d'%dimensions[0]
    i=1
    while i < len(dimensions):
      dim_str+='%d'%(dimensions[i])
      i=i+1
    self.data_item.set('Dimensions',dim_str)
    # Data type
    self.data_intel.set('DataType',NumPyTypes[type.name])
    # Describe the data location
    self.location='%s:%s'%(file,loc)
    self.data_item.text=self.location

class XDMFDomain:

  def __init__(self,model,name):
    # Root Domain tag 
    self.root=SubElement(parent=model.root,tag='Domain')
    # Setup the grid
    self.grid=SubElement(parent=self.root,tag='Grid')
    # Setup the geometry
    self.geometry=SubElement(parent=self.grid,tag='Geometry')
    # Setup the topology
    self.topology=SubElement(parent=self.grid,tag='Topology')

    # Grid name is the mesh name
    self.grid.set('Name',name)

    # Grid is always uniform, need to change for hybrid 
    self.grid.set('GridType', 'Uniform')
      
    if model.filename is not None:
      danu_file=Danu.Output(model.filename)
      mesh=danu_file.get_mesh(name)
      mesh_attr=mesh.attributes()
      # Topology
      self.topology.set('Name','Element Connectivity')
      self.topology.set('NodesPerElement',str(mesh_attr['Element Order']))
      self.topology.set('NumberOfElement',str(mesh_attr['Number of Elements']))
      self.topology.set('TopologyType',DanuElem[mesh_attr['Element Type']])
      loc='%s:/Meshes/%s/Element Connectivity'%(model.filename,name)
      self.topology.text=loc
      # Geometry
      self.geometry.set('GeometryType','XYZ')
      loc='%s:/Meshes/%s/Nodal Coordinates'%(model.filename,name)
      self.geometry.text=loc

  def set_time(self,time):
    self.time=SubElement(parent=self.grid,tag='Time')
    self.time.set('Value',str(time))

  def add_field(self,series,name,filename):
    # Need the ability to do this without readin the data 
    data=series.get_data(name)
    if name in series.cell_fields:
      cell_flag=True
    else:
      cell_flag=False
    h5_path='Simulation/MAIN/%s/%s'%(series.name,name)
    attribute=XDMFAttribute(filename,h5_path,name,data.size,data.dtype,cell_flag)
    self.grid.append(attribute.node)





class XDMFModel:

  def __init__(self,filename):
    self.filename=filename
    self.root=Element(tag='Xdmf')
    self.tree=ElementTree(element=self.root)

  def add_domain(self,name):
    return XDMFDomain(self,name)

  def printout(self,output=sys.stdout):
    prettyprint(self.tree,output)


class CLOptions:

  def __init__(self):
    from optparse import OptionParser
    usage='Usage: %prog [options] FILE'
    self.parser=OptionParser(usage)

    self.parser.add_option("--mesh","-m",dest="meshname",
                           help="Truchas mesh group name.")
    self.parser.add_option("--simulation", "-s", dest="simname", default="MAIN",
                           help="Simulation name")
    self.parser.add_option("--output","-o",dest='xdmffile',default='MAIN',
	                   help='Output of the XDMF meta file')

    (options,args) = self.parser.parse_args()

    if len(args) != 1:
      self.parser.error('Must provide a Truchas HDF5 output filename')
    self.filename=args[0]  
    self.meshname=options.meshname
    self.simname=options.simname
    self.output=options.xdmffile

  def check_options(self):

    # valid file name and file exists 
    try:
      exists=os.path.isfile(self.filename)
    except:
      msg='%s is not a valid file name'%(self.filename)
      self.parser.error(msg)
    if not exists:
      msg='%s does not exist'%(self.filename)
      self.parser.error(msg)

    # Open the file and inspect 
    h5 = TruchasOutput(self.filename)
    # Is the simulation present?
    if self.simname not in h5.simulation_names:
      msg='%s is not a simulation in %s'%(self.simname,self.filename)
      self.parser.error(msg)
    # If the mesh name is defined, is it present in the file?
    if self.meshname not in h5.mesh_names:
      if self.meshname is None and not h5.get_simulation(self.simname).mesh_link_exists:
        msg='If simulation %s does not have a link to a mesh, must provide a mesh name explicitly'%(self.simname)
        self.parser.print_help()
        self.parser.error(msg)
      elif not self.meshname is None:
	msg='Can not locate mesh %s in %s\nValid mesh names:%s'%(self.meshname,self.filename,h5.mesh_names)
	self.parser.print_help()
	self.parser.error(msg)
    del h5

    # Check the extension of the output file and add xmf if needed
    (root,ext)=os.path.splitext(self.output)
    if ext != '.xmf':
      self.output+='.xmf'



def main():
  # parse the arguments and validate
  cl_opts=CLOptions()
  cl_opts.check_options()
  # Open the file
  h5=TruchasOutput(cl_opts.filename)
  # Open the simulation and series
  simulation=h5.get_simulation(cl_opts.simname)
  series=simulation.get_last_series()
  # Open the mesh
  #if simulation.mesh_link_exists:
  #  mesh=simulation.open_mesh_link()
  #else:
  #  mesh=h5.get_mesh(cl_opts.meshname)
   
  xdmf_model=XDMFModel(cl_opts.filename)
  domain=xdmf_model.add_domain('DEFAULT')

  # Now just write out the final temp
  domain.add_field(series,'Z_TEMP',cl_opts.filename)


  xdmf_model.printout(cl_opts.output)



    
if __name__ == '__main__':
  main()


