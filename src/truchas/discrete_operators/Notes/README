DO_BASE_TYPES:

Boxed array pointers: 2 rank-2 real, 1 rank-1 real, 1 rank-1 integer
These types basically decorate arrays with a named purpose

DO_specifier type.  Structure encapsulating all the working storage
associated with LSLR, etc.  Note it contains a component of type
BC_Operator.

collection of named integer parameters: DO_SOLVE_...

================================================================================

DO_SOLVE_MODULE

Basic matrix linear algebra subroutines.  Looks like singular value decomp,
LU solve, LU factorization, matrix inversion

================================================================================

DO_UPDATE_MODULE

FGetPhiValues -- neighbor and BC field values for a cell (operates on a SS)

UpdateLSLRWeights -- update cell weights (operates on a SS)

UpdateFaceLU -- updates LU decomposition (operates on a SS)

UpdateFaceSVD -- updates SVD decomposition (operates on a SS)

================================================================================

FF_DISCRETE_OPS_DATA

ff_discrete_ops_type = {'default' | 'ortho' | 'nonortho'}
use_ff_ortho_face_gradient = {.true. | .false.}

================================================================================

DO_SOLVE_SPECIFIER

DO_INIT_SS -- initializes a SS.  If the solver type (ortho, lslr) not specified
then it looks to use_ff_ortho_face_gradient to choose.

DX_scaled -- shared array with geometry data.

================================================================================

DO_DISCRETE_OPERATORS

DO_GRADIENT_FACE (GRADIENT_FACE) -- face centered gradient of a scalar cell-
centered field.  Returns 3-vector gradient, and optionally the face-centered
field.  Switches between FACE_ORTHO and FACE_LSLR_LU according to the SS.
 
DO_FACE_SOLVE (FACE_SOLVE) -- face centered scalar from a cell-centered scalar.
Uses same code (FACE_ORTHO or FACE_LSLR_LU) but only returns the scalar.

DO_UPDATE_WEIGHTS (UPDATE_WEIGHTS) -- Updates SS weights.  Weights are passed in.
Delegates to UpdateLSLRWeights from DO_UPDATE_MODULE in LSLR case.  In ortho
case it directly modifies the SS.

================================================================================

DO_INTERFACE

This is the application interface.
Bundles together symbols from the modules above:

DO_SOLVE_*  named constants
DO_specifier type (the SS)
DO_INIT_SS
DO_GRADIENT_FACE
DO_SOLVE_FACE
DO_Update_Weights

================================================================================
================================================================================

Completely separate:

DISCRETE_OPS_MODULE

DETERMINANT_VOL_AVG
  used by ./physics/solid_mechanics/viscoplasticity.F90
  used internally GRADIENT

FACE_CENTER -- interpolates cell-centered field to face-centered
  cell->vertex averaging, pull back to cell corners (EN_gather),
  and then calls LINEAR_PROP
  UNUSED.  Was tried in ./physics/fluid_flow/viscous/viscous_module.F90 but
  commented out by Markus Bussmann -- too large a stencil
  
GRADIENT -- cell-centered gradient of a cell-centered scalar.  Three methods
  volume_average, green_gauss, lslr
  used by ./physics/fluid_flow/surface_tension/surface_tension_module.F90;
  green_gauss and volume_average (default)
  used by ./physics/fluid_flow/vof/volume_track_module.F90; green-gauss
  
GRADIENT_CELL -- cell-centered gradient of a cell-centered scalar.  Uses
  green-gauss.  How does this differ from GRADIENT?
  used by ./output/diagnostics_module.F90
  used by ./physics/fluid_flow/advection/hoadvection.F90
  
VERTEX_AVG -- vertex centered average of cell centered scalar
  used by ./physics/fluid_flow/surface_tension/surface_tension_module.F90
  used internally by FACE_CENTER, GRADIENT, GRADIENT_CELL

DYNAMIC_PRESSURE_FACE_GRADIENT -- special face-centered pressure gradient
  from cell-centered pressures and ghc/ghn (gravity head?) data.
  used by ./physics/fluid_flow/projection/projection_module.F90
  used by ./physics/fluid_flow/fluid_utilities_module.F90

================================================================================
================================================================================

Completely separate:

DISCRETE_DERIVATIVES

I don't know how this differs from the LSLR part of the DO_* package above.
Does it pre-date it, or is it newer?  It looks to replicate much of the LSLR
stuff but is completely self contained.  Aside from the core mesh and comm
routines, it only uses bc_data types to get the BC_specifier type. It has a
single user surface_tension_module.F90 and there only GRADIENT FACE.  Not
sure why all the other routines are public.
